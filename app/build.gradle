apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

ext {
    versionNumber = computeVersionNumber()+3
    versionName = (isSnapshot.toBoolean() ? rootProject.version + "-SNAPSHOT" : rootProject.version)
    keystorePath = properties['keystore.path']
    println "Live SDK version is " + versionName
    println "rootProject.properties is " + rootProject.properties
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.0"
    defaultConfig {
        applicationId "com.hypertrack.live"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode project.ext.versionNumber
        versionName project.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {

        release {
            storeFile file("/home/denis/Android/hypertrack-prod.jks")
            storePassword "hyperTrack3"
            keyAlias "live"
            keyPassword "htLive3"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            minifyEnabled false
            debuggable true
        }
    }
}

repositories {
    maven {
        name 'hypertrack'
        url 'http://m2.hypertrack.com'
    }
    maven { url 'https://maven.fabric.io/public' }
    mavenLocal()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'com.google.android.gms:play-services-maps:12.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'com.airbnb.android:lottie:3.0.7'

    implementation("com.hypertrack:hypertrack:3.1.6@aar") {transitive = true}
    implementation('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') {
        transitive = true
    }

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

def computeVersionNumber() {

    def versionString =  rootProject.version
    def match = (versionString =~ /(\d+)\.(\d+)\.(\d+)/)
    if (match) {
        def versionMajor = match.group(1).toInteger()
        def versionMinor = match.group(2).toInteger()
        def versionPatch = match.group(3).toInteger()
        return versionMajor * 1000000 + versionMinor * 1000 + versionPatch
    }
    throw new Exception("Could not read version.properties!")
}